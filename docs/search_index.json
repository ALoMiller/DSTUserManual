[["index.html", "Northwest Atlantic Protected Species Decision Support Tool User Manual 1 Preparing the DST Model Run 1.1 Example Base Run Code 1.2 InputActions Structures 1.3 Optional InputList Inputs", " Northwest Atlantic Protected Species Decision Support Tool User Manual version 4.2.00 2023-12-07 1 Preparing the DST Model Run 1.1 Example Base Run Code To understand the setup of a DST model run, its important to look at the basic code used to source the model code (including the version), set directories, and required model inputs. Model inputs are defined as a list object InputList with the required objects listed below. Finally, the model function DecisionTool is run. rm(list=ls()) ## clear the global environment HD=&quot;//net/work4/LobsterGroup/Management/RightWhales/DecisionSupportTool&quot;; setwd(HD) ## set directory to where inputs will be read from Version=&quot;DST_V4.2.00.R&quot; ## specify which DST version to load/run source(paste0(HD, &quot;/function_&quot;, Version)) ## load DST version/functions into R environment ## REQUIRED InputList INPUTS InputList = list( HomeDir=HD, ## home directory for subdirectories ModelVersion=Version, ## model version InputActions=list(Name = &quot;ScenarioName/Example.csv&quot;, Source=Wide), ## see Section 1.2 Below MapRefDomain=&quot;MapRef_3.9.2.Rdata&quot;, ## MapRef version GearMapName = &quot;FisheryInputs_AllEastCoast_v4.0.1.Rdata&quot;, ## fishery input layer ThreatModel=&quot;ThreatMod_RW_Selectivity_Uncertainty.Rdata&quot;, ## gear threat model WhaleHabitatModel=&quot;Duke_RightWhaleModel_v12_1019.Rdata&quot;, ## whale habitat model WhaleVertDistInput=list(File=&quot;RightWhaleVerticalDistribution_CSA_V1.1.Rdata&quot;, Distribution=&quot;Ensemble&quot;), ## whale vertical distribution WhaleDimensions=&quot;WhaleDimensions_AdHoc.Rdata&quot;, ## whale body dimensions CommentText = Example Comment Text ## comment text written to output tables ) DecisionTool(DecisionToolInputs = InputList) ## call DST function 1.2 InputActions Structures Within InputList, InputActions defines the scenario or management actions to be tested. These user has the option to define these in either a saved spreadsheet .csv file or within the R code (explained in Section 1.2). For this example we have named our scenario ScenarioName. 1.2.1 Saved .csv File When defining InputActions in the .csv file structure, an Excel spreadsheet (Ex. ScenarioTemplate_V4.0.0.xlsx) is used as a starting template for management. For each line, an action is specified and can be defined by fishery, spatial, and temporal bounds. Each additional column that subsets the action can be viewed as an or statement while each additional line (new action) can be viewed as an and statement. Commas can be used when specifying multiple entries for an individual cell. In this example InputActions spreadsheet there are four management actions. The first action restricts the model run to Gulf of Maine and Georges Bank (GOM_GBK) and Southern New England (SNE). The second action implements a closure to the lobster fishery in the South Island Restricted Area for January and February. The third action implements a year round closure to the gillnet fishery in Statistical Reporting Area 514. And the fourth action applies a gear reduction to state waters. This Excel spreadsheet should be saved with a new name for the scenario run with the .csv file extension in the InputSpreadsheets directory (Ex. DecisionSupportTool/InputSpreadsheets/ScenarioName/Example.csv). Source tells the DST what format the input is in so it can read in the scenario inputs properly. InputActions = list(Name = ScenarioName/Example.csv, Source = Wide) 1.2.2 Create List of Actions As an alternative to creating a saved .csv file in the InputSpreadsheets folder for model InputActions, the user can write individual actions as lists within the R code itself. These lists are then joined into a larger list of complete actions, then merge together as list of lists to write into InputActions. Following the example from the Excel spreadsheet above, we can apply these same actions as an input list in R before running the model code. In this case each action (A1, A2, A3, A4) equates to a row in the spreadsheet. A1 &lt;- list(Action = &quot;ModelConstraint&quot;, Region = &quot;GOM_GBK,SNE&quot;) A2 &lt;- list(Action = &quot;Closure&quot;, Fishery = &quot;Lobster&quot;, Months = &quot;1,2&quot;, Shapefile = &quot;South_Island_Restricted_Area&quot;) A3 &lt;- list(Action = &quot;Closure&quot;, Fishery = &quot;Gillnet&quot;, StatArea = &quot;514&quot;) A4 &lt;- list(Action = &quot;GearReduction&quot;, StateFed = &quot;State&quot;) My.Input.List &lt;- list(A1,A2,A3,A4) Since the DST will not be reading in an existing .csv file, the user will need to supply a directory name that will be associated with these input scenario actions (ScenarioName). For this method, Source is now the name of the list of lists youve just created. InputActions = list(Name = ScenarioName/Example, Source = My.Input.List) Be sure not to put .csv file at end of Example. This will lead the model to look for a .csv file within the InputSpreadsheets/ScenarioName rather than read your list. 1.2.3 Rerun or Modify Previous Scenario At the beginning of each DST model run, the model inputs and scenario InputActions are written into an .RData file within the ScenarioName with an extension _DecisionToolInputs. To rerun or modify a model, this .RData file can be read back into the R environment. load(paste0(HD,&quot;/Scenarios/ScenarioName/Example/Example_DecisionToolInputs.Rdata&quot;)) To rerun the model as-is, a new InputList is not required and the DST function can be called as follows: DecisionTool(DecisionToolInputs) The user can also modify the inputs of this model and rerun by redefining elements within the. For example, to modify rerun the above example changing the fishery input layer that is used within the model from GearMapName = FisheryInputs_AllEastCoast_v4.0.1.Rdata to GearMapName = FisheryInputs_Gillnet_v3.5.5.Rdata the user would apply the following code: DecisionToolInputs$GearMapName &lt;- &quot;FisheryInputs_Gillnet_v3.5.5.Rdata&quot; DecisionTool(DecisionToolInputs) 1.3 Optional InputList Inputs The example base run code provided in Section 1.1 lists the mandatory inputs required in the InputList. Additional optional inputs are detailed in the table below. Variable Name Example Text or T/F Default Input Notes ZoneAdjacencyFile = ExampleCSV.csv ZoneAdjacency_DSTv3.9.1.csv File for describing where gear can be displaced to during closure scenarios TestScenario = TRUE or FALSE TRUE Run Scenario Inputs. If FALSE, only default/baseline inputs produced and scenario is NOT evaluated CoOccurrence = TRUE or FALSE FALSE Run ONLY Co-Occurrence Model. Risk/Threat will not be estimated or produced IncludeGroundGear = TRUE or FALSE FALSE Option to estimate Co-Occurrence and Risk associated with GroundGear (groundline and gillnets). If FALSE, only threat of vertical endlines is assessed HighResolution = TRUE or FALSE FALSE If TRUE, scenario is run at 1nm^2 resolution. If FALSE, run is conducted at 10nm^2 resolution RelocationCostExp = Positive Numeric Value 1 Cost of relocating gear during a closure scenario. RelocationCost=Distance^(RelocationCostExp). Higher values cause more fencing; lower values spread gear more evenly outside of closures ExpressRedistribution = TRUE or FALSE FALSE RopeStrengthResolution = Positive Numeric Value 500 Resolution that input rope strengths are rounded to. Lower values will lead to higher rope strength resolution, but will extend run time MinGearDensity = Positive Numeric Value 1e-5 Threshold minimum gear density within a cell. Fishery input observations with less than this threshold will be removed from further modelling. AutoConstrain = TRUE or FALSE FALSE Option for DST to to automatically constrain spatial domain of scenario run to which area or fishery is specified in scenario actions ThreatBounds = TRUE or FALSE FALSE Option to produce upper and lower 95% confidence intervals from Threat Model on estimated Risk estimates CalculateAffectedLineDepth = TRUE or FALSE FALSE SpLayout = NA PrintTables = TRUE or FALSE TRUE Option to print pdf of output tables- written to scenario subfolder specified in InputActions = list() PrintDefaultMaps = TRUE or FALSE TRUE Option to print pdf of output default maps and map sources (RData files)- written to scenario subfolder specified in InputActions = list() PrintScenarioMaps = TRUE or FALSE TRUE Option to print pdf of output scenario maps and map sources (RData files)- written to scenario subfolder specified in InputActions = list() PrintRedistributionMaps = TRUE or FALSE FALSE Option to print output redistribution maps of gear redistributed from closures- written to scenario subfolder specified in InputActions = list() TruncateMaps = Positive Value between 0 and 1 1 Upper quantile to truncate output maps at. Default value of 1 prints all output WriteOutputCSV = TRUE or FALSE TRUE Write default and scenario results output to csv- written to scenario subfolder specified in InputActions = list() WriteMapSources = TRUE or FALSE FALSE Option to print map sources (Rdata outputs) without printing pdf of output maps- written to scenario subfolder specified in InputActions = list() ProvideSplitOutput = TRUE or FALSE FALSE Option for DST to report Co-Occurrence and Risk from vertical lines and = GroundGear separately WriteDetailedOutput = TRUE or FALSE FALSE Option to write DST outputs from Stage 1 - 9 of the model as Rdata sources- written to scenario subfolder specified in InputActions = list() PrintSummary = TRUE or FALSE FALSE Option to write out model summary to R Console at end of DST run ArchiveInputSpreadsheet = TRUE or FALSE FALSE Remove scenario CSV from InputActions = list() scenario subfolder to an archive subfolder AggregateStrings = TRUE or FALSE FALSE Option to aggregate String distributions within vessel classes to decrease run time ManageMemory = TRUE or FALSE FALSE Option to remove stage by stage output as the model progresses to reduce memory usage of scenario run NewPlots = TRUE or FALSE TRUE Option to produce original mapping structure (FALSE) or updated mapping structure (TRUE) PlotLMAs = TRUE or FALSE FALSE NOT YET FUNCTIONAL. Option to print outlines of Lobster Management Areas to output maps. PlotStatAreas = TRUE or FALSE FALSE NOT YET FUNCTIONAL. Option to print outlines of Statistical Reporting Areas to output maps. SelectBaselineYears = Single value between 2012 and 2020 NA NOT YET FUNCTIONAL. Option to subset fishery layer to a single year that is used as baseline fishery layer for default and scenario Co-Occurrence and Risk calculations. optional.input &lt;- data.frame(VariableName = c(ZoneAdjacencyFile =,TestScenario =,CoOccurrence =), ExampleText = c(Example.csv,TRUE or FALSE,TRUE or FALSE), DefaultInput = c) 1.3.1 Available Fisheries 1.3.2 Available Scenario Actions "],["inside-the-dst-initial-load-and-configure.html", "2 Inside the DST: Initial Load and Configure 2.1 Read Input List 2.2 Load Data", " 2 Inside the DST: Initial Load and Configure 2.1 Read Input List 2.2 Load Data "],["inside-the-dst-model-stages.html", "3 Inside the DST: Model Stages 3.1 Stage 1: Gear Reductions", " 3 Inside the DST: Model Stages 3.1 Stage 1: Gear Reductions "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
